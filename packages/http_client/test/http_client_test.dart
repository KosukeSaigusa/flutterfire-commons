import 'package:flutter_test/flutter_test.dart';
import 'package:http_client/http_client.dart';

void main() {
  test('statusCode test', () {
    expect(getStatusCode(statusCode: 100).code, 100);
    expect(getStatusCode(statusCode: 101).code, 101);
    expect(getStatusCode(statusCode: 102).code, 102);
    expect(getStatusCode(statusCode: 200).code, 200);
    expect(getStatusCode(statusCode: 201).code, 201);
    expect(getStatusCode(statusCode: 202).code, 202);
    expect(getStatusCode(statusCode: 203).code, 203);
    expect(getStatusCode(statusCode: 204).code, 204);
    expect(getStatusCode(statusCode: 205).code, 205);
    expect(getStatusCode(statusCode: 206).code, 206);
    expect(getStatusCode(statusCode: 207).code, 207);
    expect(getStatusCode(statusCode: 208).code, 208);
    expect(getStatusCode(statusCode: 226).code, 226);
    expect(getStatusCode(statusCode: 300).code, 300);
    expect(getStatusCode(statusCode: 301).code, 301);
    expect(getStatusCode(statusCode: 302).code, 302);
    expect(getStatusCode(statusCode: 303).code, 303);
    expect(getStatusCode(statusCode: 304).code, 304);
    expect(getStatusCode(statusCode: 305).code, 305);
    expect(getStatusCode(statusCode: 307).code, 307);
    expect(getStatusCode(statusCode: 308).code, 308);
    expect(getStatusCode(statusCode: 400).code, 400);
    expect(getStatusCode(statusCode: 401).code, 401);
    expect(getStatusCode(statusCode: 402).code, 402);
    expect(getStatusCode(statusCode: 403).code, 403);
    expect(getStatusCode(statusCode: 404).code, 404);
    expect(getStatusCode(statusCode: 405).code, 405);
    expect(getStatusCode(statusCode: 406).code, 406);
    expect(getStatusCode(statusCode: 407).code, 407);
    expect(getStatusCode(statusCode: 408).code, 408);
    expect(getStatusCode(statusCode: 409).code, 409);
    expect(getStatusCode(statusCode: 410).code, 410);
    expect(getStatusCode(statusCode: 411).code, 411);
    expect(getStatusCode(statusCode: 412).code, 412);
    expect(getStatusCode(statusCode: 413).code, 413);
    expect(getStatusCode(statusCode: 414).code, 414);
    expect(getStatusCode(statusCode: 415).code, 415);
    expect(getStatusCode(statusCode: 416).code, 416);
    expect(getStatusCode(statusCode: 417).code, 417);
    expect(getStatusCode(statusCode: 422).code, 422);
    expect(getStatusCode(statusCode: 423).code, 423);
    expect(getStatusCode(statusCode: 424).code, 424);
    expect(getStatusCode(statusCode: 426).code, 426);
    expect(getStatusCode(statusCode: 428).code, 428);
    expect(getStatusCode(statusCode: 429).code, 429);
    expect(getStatusCode(statusCode: 431).code, 431);
    expect(getStatusCode(statusCode: 500).code, 500);
    expect(getStatusCode(statusCode: 501).code, 501);
    expect(getStatusCode(statusCode: 502).code, 502);
    expect(getStatusCode(statusCode: 503).code, 503);
    expect(getStatusCode(statusCode: 504).code, 504);
    expect(getStatusCode(statusCode: 505).code, 505);
    expect(getStatusCode(statusCode: 506).code, 506);
    expect(getStatusCode(statusCode: 507).code, 507);
    expect(getStatusCode(statusCode: 508).code, 508);
    expect(getStatusCode(statusCode: 510).code, 510);
    expect(getStatusCode(statusCode: 511).code, 511);
    expect(getStatusCode(statusCode: 0).code, 0);
  });

  test('statusCode message test', () {
    expect(getStatusCode(statusCode: 100).message, 'Continue');
    expect(getStatusCode(statusCode: 101).message, 'Switching Protocols');
    expect(getStatusCode(statusCode: 102).message, 'Processing');
    expect(getStatusCode(statusCode: 200).message, 'OK');
    expect(getStatusCode(statusCode: 201).message, 'Created');
    expect(getStatusCode(statusCode: 202).message, 'Accepted');
    expect(getStatusCode(statusCode: 203).message,
        'Non-Authoritative Information');
    expect(getStatusCode(statusCode: 204).message, 'No Content');
    expect(getStatusCode(statusCode: 205).message, 'Reset Content');
    expect(getStatusCode(statusCode: 206).message, 'Partial Content');
    expect(getStatusCode(statusCode: 207).message, 'Multi-Status');
    expect(getStatusCode(statusCode: 208).message, 'Already Reported');
    expect(getStatusCode(statusCode: 226).message, 'IM Used');
    expect(getStatusCode(statusCode: 300).message, 'Multiple Choices');
    expect(getStatusCode(statusCode: 301).message, 'Moved Permanently');
    expect(getStatusCode(statusCode: 302).message, 'Found');
    expect(getStatusCode(statusCode: 303).message, 'See Other');
    expect(getStatusCode(statusCode: 304).message, 'Not Modified');
    expect(getStatusCode(statusCode: 305).message, 'Use Proxy');
    expect(getStatusCode(statusCode: 307).message, 'Temporary Redirect');
    expect(getStatusCode(statusCode: 308).message, 'Permanent Redirect');
    expect(getStatusCode(statusCode: 400).message, 'Bad Request');
    expect(getStatusCode(statusCode: 401).message, 'Unauthorized');
    expect(getStatusCode(statusCode: 402).message, 'Payment Required');
    expect(getStatusCode(statusCode: 403).message, 'Forbidden');
    expect(getStatusCode(statusCode: 404).message, 'Not Found');
    expect(getStatusCode(statusCode: 405).message, 'Method Not Allowed');
    expect(getStatusCode(statusCode: 406).message, 'Not Acceptable');
    expect(getStatusCode(statusCode: 407).message,
        'Proxy Authentication Required');
    expect(getStatusCode(statusCode: 408).message, 'Request Timeout');
    expect(getStatusCode(statusCode: 409).message, 'Conflict');
    expect(getStatusCode(statusCode: 410).message, 'Gone');
    expect(getStatusCode(statusCode: 411).message, 'Length Required');
    expect(getStatusCode(statusCode: 412).message, 'Precondition Failed');
    expect(getStatusCode(statusCode: 413).message, 'Payload Too Large');
    expect(getStatusCode(statusCode: 414).message, 'URI Too Long');
    expect(getStatusCode(statusCode: 415).message, 'Unsupported Media Type');
    expect(getStatusCode(statusCode: 416).message, 'Range Not Satisfiable');
    expect(getStatusCode(statusCode: 417).message, 'Expectation Failed');
    expect(getStatusCode(statusCode: 422).message, 'Unprocessable Entity');
    expect(getStatusCode(statusCode: 423).message, 'Locked');
    expect(getStatusCode(statusCode: 424).message, 'Failed Dependency');
    expect(getStatusCode(statusCode: 426).message, 'Upgrade Required');
    expect(getStatusCode(statusCode: 428).message, 'Precondition Required');
    expect(getStatusCode(statusCode: 429).message, 'Too Many Requests');
    expect(getStatusCode(statusCode: 431).message,
        'Request Header Fields Too Large');
    expect(getStatusCode(statusCode: 500).message, 'Internal Server Error');
    expect(getStatusCode(statusCode: 501).message, 'Not Implemented');
    expect(getStatusCode(statusCode: 502).message, 'Bad Gateway');
    expect(getStatusCode(statusCode: 503).message, 'Service Unavailable');
    expect(getStatusCode(statusCode: 504).message, 'Gateway Timeout');
    expect(
        getStatusCode(statusCode: 505).message, 'HTTP Version Not Supported');
    expect(getStatusCode(statusCode: 506).message, 'Variant Also Negotiates');
    expect(getStatusCode(statusCode: 507).message, 'Insufficient Storage');
    expect(getStatusCode(statusCode: 508).message, 'Loop Detected');
    expect(getStatusCode(statusCode: 510).message, 'Not Extended');
    expect(getStatusCode(statusCode: 511).message,
        'Network Authentication Required');
    expect(getStatusCode(statusCode: 0).message, 'Unknown');
  });

  test('statusCode messageInJP test', () {
    expect(getStatusCode(statusCode: 100).messageInJP, '継続');
    expect(getStatusCode(statusCode: 101).messageInJP, 'プロトコルの切り替え');
    expect(getStatusCode(statusCode: 102).messageInJP, '処理中');
    expect(getStatusCode(statusCode: 200).messageInJP, 'OK');
    expect(getStatusCode(statusCode: 201).messageInJP, '作成');
    expect(getStatusCode(statusCode: 202).messageInJP, '受理');
    expect(getStatusCode(statusCode: 203).messageInJP, '信頼できない情報です');
    expect(getStatusCode(statusCode: 204).messageInJP, '内容がありません');
    expect(getStatusCode(statusCode: 205).messageInJP, 'コンテンツのリセット');
    expect(getStatusCode(statusCode: 206).messageInJP, '部分的なコンテンツ');
    expect(getStatusCode(statusCode: 207).messageInJP, 'マルチステータス');
    expect(getStatusCode(statusCode: 208).messageInJP, 'すでに報告されています');
    expect(getStatusCode(statusCode: 226).messageInJP, 'IM Used');
    expect(getStatusCode(statusCode: 300).messageInJP, '複数の選択肢');
    expect(getStatusCode(statusCode: 301).messageInJP, '永久に移動されました');
    expect(getStatusCode(statusCode: 302).messageInJP, '見つかりました');
    expect(getStatusCode(statusCode: 303).messageInJP, 'その他を参照');
    expect(getStatusCode(statusCode: 304).messageInJP, '非修飾');
    expect(getStatusCode(statusCode: 305).messageInJP, 'プロキシを使用する');
    expect(getStatusCode(statusCode: 307).messageInJP, '一時的なリダイレクト');
    expect(getStatusCode(statusCode: 308).messageInJP, '恒久的なリダイレクト');
    expect(getStatusCode(statusCode: 400).messageInJP, '不正なリクエスト');
    expect(getStatusCode(statusCode: 401).messageInJP, '認証エラー');
    expect(getStatusCode(statusCode: 402).messageInJP, '支払いが必要です');
    expect(getStatusCode(statusCode: 403).messageInJP, '許可されていません');
    expect(getStatusCode(statusCode: 404).messageInJP, '見つかりませんでした');
    expect(getStatusCode(statusCode: 405).messageInJP, 'メソッドは許可されていません');
    expect(getStatusCode(statusCode: 406).messageInJP, '受け入れ不可');
    expect(getStatusCode(statusCode: 407).messageInJP, 'プロキシ認証が必要です');
    expect(getStatusCode(statusCode: 408).messageInJP, 'リクエストタイムアウト');
    expect(getStatusCode(statusCode: 409).messageInJP, 'コンフリクト');
    expect(getStatusCode(statusCode: 410).messageInJP, '過ぎています');
    expect(getStatusCode(statusCode: 411).messageInJP, '長さが必要です');
    expect(getStatusCode(statusCode: 412).messageInJP, '事前条件失敗');
    expect(getStatusCode(statusCode: 413).messageInJP, 'ペイロードが大きすぎます');
    expect(getStatusCode(statusCode: 414).messageInJP, 'URIが長すぎます');
    expect(getStatusCode(statusCode: 415).messageInJP, '未対応のメディアタイプ');
    expect(getStatusCode(statusCode: 416).messageInJP, '範囲を満たしていません');
    expect(getStatusCode(statusCode: 417).messageInJP, '期待された値が設定されていません');
    expect(getStatusCode(statusCode: 422).messageInJP, '処理不能なエンティティ');
    expect(getStatusCode(statusCode: 423).messageInJP, 'ロックされました');
    expect(getStatusCode(statusCode: 424).messageInJP, '依存関係に失敗しました');
    expect(getStatusCode(statusCode: 426).messageInJP, 'アップグレードが必要です');
    expect(getStatusCode(statusCode: 428).messageInJP, '前提条件が必要です');
    expect(getStatusCode(statusCode: 429).messageInJP, '要求が多すぎます');
    expect(getStatusCode(statusCode: 431).messageInJP, 'リクエストヘッダーフィールドが大きすぎます');
    expect(getStatusCode(statusCode: 500).messageInJP, '内部サーバーエラー');
    expect(getStatusCode(statusCode: 501).messageInJP, '未実装');
    expect(getStatusCode(statusCode: 502).messageInJP, '不正なゲートウェイ');
    expect(getStatusCode(statusCode: 503).messageInJP, 'サービス不能');
    expect(getStatusCode(statusCode: 504).messageInJP, 'ゲートウェイタイムアウト');
    expect(getStatusCode(statusCode: 505).messageInJP, 'HTTPバージョンはサポートされていません');
    expect(getStatusCode(statusCode: 506).messageInJP, 'バリアントも交渉中');
    expect(getStatusCode(statusCode: 507).messageInJP, 'ストレージの不足');
    expect(getStatusCode(statusCode: 508).messageInJP, 'ループが検出されました');
    expect(getStatusCode(statusCode: 510).messageInJP, '拡張なし');
    expect(getStatusCode(statusCode: 511).messageInJP, 'ネットワーク認証が必要です');
    expect(getStatusCode(statusCode: 0).messageInJP, '原因不明');
  });
}
